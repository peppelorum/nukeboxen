#pragma checksum "/Users/peppe/Dev/pitch/pitchserver/Views/Music/Player.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "918e6cb385b0ec9c142b43946805fba7f232d28d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Music_Player), @"mvc.1.0.view", @"/Views/Music/Player.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/peppe/Dev/pitch/pitchserver/Views/_ViewImports.cshtml"
using pitchserver;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/peppe/Dev/pitch/pitchserver/Views/_ViewImports.cshtml"
using pitchserver.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"918e6cb385b0ec9c142b43946805fba7f232d28d", @"/Views/Music/Player.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8258dcc63f357656e1b3a6ca822e56e40c79b657", @"/Views/_ViewImports.cshtml")]
    public class Views_Music_Player : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "918e6cb385b0ec9c142b43946805fba7f232d28d3135", async() => {
                WriteLiteral(@"
        <meta charset=""UTF-8"">

        <title>Pianobaren</title>

        <script src=""https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js""></script>
        <script src=""https://unpkg.com/vue@next""></script>
        <script src=""https://unpkg.com/tone@13.8.25/build/Tone.js""></script>
    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "918e6cb385b0ec9c142b43946805fba7f232d28d4397", async() => {
                WriteLiteral(@"
        <button id=""start-stop"">start</button>
        <button id=""up"">up</button>
        <button id=""down"">down</button>
        <button id=""pitchstart"">start pitch</button>
        <button id=""pitchstop"">stop pitch</button>


        <button id=""noise"">noise</button>

        <div id=""app"">
            <button ");
                WriteLiteral(@"@click=""getFiles"">get files</button>

            <ul>
                <li v-for=""n in files"" :key=""n"">{{ n }}</li>
            </ul>
        </div>

        <script>

            const watchExampleVM = Vue.createApp({
                data() {
                    return {
                        files: []
                    }
                },
                watch: {
                // whenever question changes, this function will run
                /*question(newQuestion, oldQuestion) {
                    if (newQuestion.indexOf('?') > -1) {
                    this.getAnswer()
                    }
                } */
                },
                mounted () {
                    axios.get('/music/getfiles')
                    .then(function (response) {
                        console.log(response);
");
                WriteLiteral(@"                        watchExampleVM.$root.$data.files = response.data;
                    })
                    .catch(function (error) {
                        console.log(error);
                    })
                    .then(function () {
                    });
                },
                methods: {
                    getFiles() {
                    
                    }
                }
            }).mount('#app')
        </script>
        

        <script>

			const player = new Tone.Player({
				url: '/Music/Funk/Cumbia.mp3',
				loop: true,
				autostart: false,
			})

            const $startStopButton = document.getElementById('start-stop');
            const $upButton = document.getElementById('up');
            const $downButton = document.getElementById('down');
            const $pitchstart = document.getElementById('pitchstart');
            const $pitchstop = document.getElementById('pitchstop');
            const $noise = document.getElementB");
                WriteLiteral(@"yId('noise');

            // const oscillator = new Tone.Oscillator();
            const pitchShift = new Tone.PitchShift();

            player.connect(pitchShift);
            pitchShift.toMaster();

            $startStopButton.onclick = () => {
                if ($startStopButton.textContent === 'start') {
                    $startStopButton.textContent = 'stop';
                    player.start();
                } else {
                    $startStopButton.textContent = 'start';
                    player.stop();
                }
            };

            $noise.onclick = () => {
                const distortion = new Tone.Distortion(0.4).toDestination();
                //connect a player to the distortion
                player.connect(distortion);
            }

            var pitchInterval;
            var pitchUp = true;
            var pitchAdjust = 0.1;
            var music = [];

            function getFiles() {
               
            }

          ");
                WriteLiteral(@"  function startPitch() {
                clearInterval(pitchInterval);
                var next = Math.round(Math.random() * 100);
                pitchInterval = setInterval(pitch, next)
            }

            function stopPitch() {
                pitchShift.pitch = 0;
                clearInterval(pitchInterval);
            }

            function pitch() {
                if (pitchShift.pitch > 1) {
                    pitchUp = false;
                }
                if (pitchShift.pitch < -1) {
                    pitchUp = true;
                }
                

                if (pitchUp) {
                    pitchShift.pitch += pitchAdjust;
                } else {
                    pitchShift.pitch -= pitchAdjust;
                }
                startPitch();
            }

            $pitchstart.onclick = () => startPitch();
            $pitchstop.onclick = () => stopPitch();

            $upButton.onclick = () =>  {
                
                ");
                WriteLiteral("pitchShift.pitch += 0.1;\r\n            }\r\n            $downButton.onclick = () => pitchShift.pitch -= 0.1;\r\n        </script>\r\n    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
